from extract_icon import *
from PIL import Image, ImageChops
import os, sys
from tqdm import tqdm
import multiprocessing as mp

def extract_from_file(file):

    try:
        extractor = ExtractIcon(file)

        groups = extractor.get_group_icons()

        '''
        for i in range(len(groups)): # each icon in the binary
            for j in range(len(groups[i])): # each size in the binary
                print(f"Group: {i}\t\tIcon: {j}")
                im = extractor.export(groups[i], j)
                im.show()
        '''

        im = extractor.export(groups[0], extractor.best_icon(groups[0]))
        #print(f'Saving to {os.path.join("./extracted_images/", file.split("/")[-1] + ".jpg")}')
        #im.show()
        im.save(os.path.join("./extracted_images/", file.split("/")[-1] + ".png"), "PNG")
    except:
        pass
    

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(f"Usage: python3 {sys.argv[0]} <binaries_dir>")

    a = os.listdir(sys.argv[1])
    print(a[0])
    print(os.path.isfile(a[0]))

    files = [ os.path.join(sys.argv[1], f) for f in os.listdir( sys.argv[1] ) if os.path.isfile(os.path.join(sys.argv[1], f)) ] #list comprehension version.

    with mp.Pool(mp.cpu_count()-2) as p:
        list(tqdm(p.imap(extract_from_file, files), total=len(files)))


    #for file in tqdm(files[:1000]):
        #print(f"Doing {file}")
        #extract_from_file(file)